import org.apache.commons.configuration2.PropertiesConfiguration
import org.apache.commons.configuration2.builder.FileBasedConfigurationBuilder
import org.apache.commons.configuration2.builder.fluent.Parameters
import org.apache.commons.configuration2.convert.DefaultListDelimiterHandler

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.commons:commons-configuration2:2.7'
        classpath 'commons-beanutils:commons-beanutils:1.9.3'
    }
}

plugins {
    id "idea"
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id "com.energizedwork.idea-base" version "1.4"
}

def buildProps = new FileBasedConfigurationBuilder(PropertiesConfiguration)
        .configure(new Parameters().properties()
                           .setFileName("build.properties")
                           .setListDelimiterHandler(new DefaultListDelimiterHandler(',' as char)))
        .getConfiguration()

ext {
    gebVersion = '3.0.1'
    seleniumVersion = '3.14.0'
    chromeDriverVersion = '81.0.4044.69'
    geckoDriverVersion = '0.24.0'

    uiTestSuites = buildProps.getList('uiTestSuites', [])
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    implementation "org.gebish:geb-spock:$gebVersion"
    implementation("org.spockframework:spock-core:1.3-groovy-2.5") {
        exclude group: "org.codehaus.groovy"
    }

    // Drivers
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    implementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    //Random Data Generator
    implementation 'io.codearte.jfairy:jfairy:0.5.8'
    implementation 'io.qala.datagen:qala-datagen:1.9.2'

    //REST API
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

    //Geb spock reports
    implementation 'com.aoe:geb-spock-reports:0.2.0'
    implementation('com.athaydes:spock-reports:1.6.0') { transitive = false }

    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.13'
    implementation 'org.slf4j:slf4j-simple:1.7.13'

    //gmail api
    implementation 'com.google.api-client:google-api-client:1.23.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    implementation 'com.google.apis:google-api-services-gmail:v1-rev83-1.23.0'
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

test {
    group 'Geb'
    description 'Runs tests defined by parameters: -Dgeb.env=[dev,smoke,test] -Dsuite=[smoke] -Dretry=[true,false]'

    // Set geb Environment or set default one
    systemProperty 'geb.env', System.properties.'geb.env' ?: 'dev'

    // Define if tests should retry on failure
    systemProperty 'retry', System.properties.'retry' ?: true

    // Run specific test set
    useJUnit {
        uiTestSuites.each { category ->
            includeCategories(category)
        }
    }
}

task localtest(type: Test) {
    group 'Geb'
    description 'Runs limited regression on dev environment with no retry'

    // Set geb Environment or set default one
    systemProperty 'geb.env', 'dev'

    // Set suite Smoke
    systemProperty 'suite', 'smoke'

    // Set retries to 0
    systemProperty 'retry', false

    // Run specific test set
    useJUnit {
        uiTestSuites.each { category ->
            includeCategories(category)
        }
    }
}

tasks.withType(Test) {
    // Get system properties to get environment value
    systemProperties System.properties as Map<String, ?>

    // Run tests even when code is not updated
    dependsOn 'cleanTest'

    // Show that tests are run in the command-line
    testLogging {
        events 'started', 'skipped', 'passed'
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

defaultTasks 'test', 'localtest'